# Minimal ToDo: PHP REST API + Frontend

Минимальный ToDo-приложение: собственный REST API на чистом PHP (без фреймворков) и простой фронтенд на HTML/CSS/JS. В комплекте — готовая конфигурация для быстрого запуска через Docker или локально через встроенный сервер PHP.

Проект расширен небольшой аутентификацией (регистрация/логин по email+пароль) для демонстрации «простейшей безопасности», при этом полностью соответствует базовым требованиям PROMPT.md.

---

## Быстрый старт

Вариант A. Docker (рекомендуется)

```zsh
# 1) Запуск
docker compose up -d --pull always

# 2) Открыть фронтенд
xdg-open http://localhost:8080 || open http://localhost:8080 || echo "Откройте http://localhost:8080 в браузере"

# 3) Остановка (по желанию)
docker compose down
```

Вариант B. Локально (PHP >= 8.1 + Composer)

```zsh
# 1) Установка зависимостей
composer install

# 2) Запуск встроенного веб-сервера PHP (роутер уже настроен)
php -S 127.0.0.1:8000 router.php

# 3) Открыть фронтенд
xdg-open http://127.0.0.1:8000 || open http://127.0.0.1:8000 || echo "Откройте http://127.0.0.1:8000 в браузере"
```

Примечания
- Для запуска не требуется база данных — данные хранятся в JSON-файлах в каталоге `storage/`.
- На Linux возможны вопросы прав на запись в `storage/`. В Docker это решено через запуск `php-fpm` под вашим UID/GID. Локально — достаточно прав текущего пользователя.

---

## Что внутри

Стек
- PHP 8.1+ (в Docker: php:8.4-fpm)
- Роутинг — nikic/fast-route
- Хранилище — JSON-файлы на диске
- Frontend — чистый HTML + Bootstrap 5 (через CDN) + чистый JS
- Docker: nginx + php-fpm + composer

Ключевые файлы
- `api.php` — точка входа API, маршрутизация и выполнение контроллеров
- `src/` — код приложения (HTTP-обёртки, сервисы, репозитории)
- `storage/` — JSON-файлы-хранилища (`tasks.json`, `users.json`, `tokens.json`)
- `index.html` — фронтенд-страница
- `router.php` — роутер для встроенного сервера PHP (локальный запуск)
- `docker-compose.yml` + `nginx.conf` — конфигурация Docker

---

## API

Базовый URL (Docker): `http://localhost:8080`
Базовый URL (локально): `http://127.0.0.1:8000`

Заголовки (всегда)
- `Content-Type: application/json` (для запросов с телом)
- `Authorization: Bearer <token>` — для защищённых эндпоинтов

Схема задачи
```json
{
  "id": 1,
  "title": "string (<=255)",
  "completed": false,
  "created_at": "ISO8601",
  "updated_at": "ISO8601?"
}
```

Аутентификация (расширение, добавлено сверх минимума)
- `POST /auth/register` — регистрация
  - Вход: `{ "email": "user@example.com", "password": "secret123" }`
  - Ответ: `{ "token": "...", "user": { "id": 1, "email": "user@example.com" } }`
- `POST /auth/login` — вход
  - Вход: `{ "email": "user@example.com", "password": "secret123" }`
  - Ответ: как выше
- `GET /me` — данные текущего пользователя
  - Требует заголовок `Authorization: Bearer <token>`
  - Ответ: `{ "id": 1, "email": "user@example.com" }`

Задачи (все эндпоинты защищены токеном)
- `GET /tasks` — список задач пользователя (пагинация)
  - Параметры: `page` (>=1, по умолчанию 1), `per_page` (1..100, по умолчанию 10)
  - Ответ: `{ items: Task[], page, per_page, total, total_pages }`
- `POST /tasks` — создать задачу
  - Вход: `{ "title": "string" }`
  - Ответ: `Task`
- `PATCH /tasks/{id}` — обновить задачу (название и/или статус)
  - Вход: `{ "title"?: "string", "completed"?: boolean|string|number }`
  - Ответ: `Task`
- `DELETE /tasks/{id}` — удалить задачу
  - Ответ: `{ "deleted": id }`

Примеры запросов (curl)
```zsh
# Регистрация
curl -sS -X POST http://localhost:8080/auth/register \
  -H 'Content-Type: application/json' \
  -d '{"email":"user@example.com","password":"secret123"}'

# Логин
curl -sS -X POST http://localhost:8080/auth/login \
  -H 'Content-Type: application/json' \
  -d '{"email":"user@example.com","password":"secret123"}'
# Сохраните из ответа значение token

# Список задач
curl -sS 'http://localhost:8080/tasks?page=1&per_page=10' \
  -H 'Authorization: Bearer TOKEN_HERE'

# Создание задачи
curl -sS -X POST http://localhost:8080/tasks \
  -H 'Content-Type: application/json' -H 'Authorization: Bearer TOKEN_HERE' \
  -d '{"title":"First task"}'

# Обновление статуса
curl -sS -X PATCH http://localhost:8080/tasks/1 \
  -H 'Content-Type: application/json' -H 'Authorization: Bearer TOKEN_HERE' \
  -d '{"completed": true}'

# Переименование
curl -sS -X PATCH http://localhost:8080/tasks/1 \
  -H 'Content-Type: application/json' -H 'Authorization: Bearer TOKEN_HERE' \
  -d '{"title": "New title"}'

# Удаление
curl -sS -X DELETE http://localhost:8080/tasks/1 \
  -H 'Authorization: Bearer TOKEN_HERE'
```

---

## Frontend

Один файл `index.html` на Bootstrap 5. Умеет:
- Регистрация/вход, хранение токена в `localStorage`
- Просмотр задач с пагинацией
- Создание, переименование, переключение статуса, удаление
- Простые уведомления об ошибках

Для работы фронта достаточно открыть базовый URL (см. «Быстрый старт»). Никаких сборщиков или Node.js не требуется.

---

## Соответствие требованиям PROMPT.md

- REST API на чистом PHP, без фреймворков — да (`api.php`, собственный роутинг на FastRoute)
- CRUD по задачам: GET/POST/PATCH/DELETE `/tasks` — да
- Хранение в JSON — да (`storage/tasks.json`)
- Структура задачи (id, title, completed) — да (добавлены timestamp-поля для удобства)
- Ответы JSON — да (см. `App\\Http\\Response`)
- Самостоятельный роутинг/чтение/запись/валидация — да (`src/`)
- Frontend на чистом JS — да (`index.html`)
- Базовая безопасность — да (простейшая токен-аутентификация)

---

## Отладка и разработка

Запуск анализаторов (локально):
```zsh
vendor/bin/phpstan analyze -c phpstan.neon.dist
vendor/bin/pint -v
```

Быстрый смоук-тест API (локально):
```zsh
php -S 127.0.0.1:8000 router.php
# затем повторить curl-примеры выше, подставив 127.0.0.1:8000
```

Где лежат данные
- `storage/users.json` — пользователи
- `storage/tokens.json` — токены
- `storage/tasks.json` — задачи

Сброс данных
```zsh
rm -f storage/*.json
# файлы пересоздадутся автоматически при первом обращении
```

---

## Траблшутинг

- Порт занят — смените порт публикации в `docker-compose.yml` (строка `8080:80`) или используйте локальный запуск на `127.0.0.1:8000`.
- Нет прав на запись в `storage/` — проверьте права папки (локально) или перезапустите Docker, переменные `UID/GID` подставляются автоматически.
- Браузер кэширует — обновите страницу с обходом кэша (Ctrl+Shift+R / Cmd+Shift+R).

---

Сделано просто и аккуратно, чтобы: клонировали — запустили — работает.
